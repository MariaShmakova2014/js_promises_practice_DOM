{"version":3,"sources":["scripts/main.js"],"names":["body","document","createNotification","message","classValue","notification","createElement","setAttribute","innerText","classList","append","firstPromise","Promise","resolve","reject","addEventListener","setTimeout","Error","clickPromise","contextMenuPromise","then","result","catch","error","secondPromise","race","value","thirdPromise","all"],"mappings":";AAAA,aAEA,IAAMA,EAAOC,SAASD,KAEtB,SAASE,EAAmBC,EAASC,GAC7BC,IAAAA,EAAeJ,SAASK,cAAc,OAE5CD,EAAaE,aAAa,UAAW,gBACrCF,EAAaG,UAAYL,EACzBE,EAAaI,UAAYL,EACzBJ,EAAKU,OAAOL,GAGd,IAAMM,EAAe,IAAIC,QAAQ,SAACC,EAASC,GACzCd,EAAKe,iBAAiB,QAAS,WAC7BF,EAAQ,gCAGVG,WAAW,WACTF,EAAOG,MAAM,gCACZ,OAGCC,EAAe,IAAIN,QAAQ,SAAAC,GAC/BZ,SAASc,iBAAiB,QAAS,WACjCF,QAIEM,EAAqB,IAAIP,QAAQ,SAAAC,GACrCZ,SAASc,iBAAiB,cAAe,WACvCF,QAIJF,EACGS,KAAK,SAAAC,GACJnB,EAAmBmB,EAAQ,aAE5BC,MAAM,SAAAC,GACLrB,EAAmBqB,EAAO,aAG9B,IAAMC,EAAgB,IAAIZ,QAAQ,SAACC,EAASC,GAC1CF,QAAQa,KAAK,CAACP,EAAcC,IACzBC,KAAK,SAACM,GAAUb,OAAAA,EAAQ,mCAG7BW,EACGJ,KAAK,SAAAC,GACJnB,EAAmBmB,EAAQ,aAG/B,IAAMM,EAAe,IAAIf,QAAQ,SAAAC,GAC/BD,QAAQgB,IAAI,CAACV,EAAcC,IACxBC,KAAK,SAACM,GAAUb,OAAAA,EAAQ,kCAG7Bc,EACGP,KAAK,SAAAC,GACJnB,EAAmBmB,EAAQ","file":"main.bbc903c1.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst body = document.body;\n\nfunction createNotification(message, classValue) {\n  const notification = document.createElement('div');\n\n  notification.setAttribute('data-qa', 'notification');\n  notification.innerText = message;\n  notification.classList = classValue;\n  body.append(notification);\n}\n\nconst firstPromise = new Promise((resolve, reject) => {\n  body.addEventListener('click', () => {\n    resolve('First promise was resolved');\n  });\n\n  setTimeout(() => {\n    reject(Error('First promise was rejected'));\n  }, 3000);\n});\n\nconst clickPromise = new Promise(resolve => {\n  document.addEventListener('click', () => {\n    resolve();\n  });\n});\n\nconst contextMenuPromise = new Promise(resolve => {\n  document.addEventListener('contextmenu', () => {\n    resolve();\n  });\n});\n\nfirstPromise\n  .then(result => {\n    createNotification(result, 'success');\n  })\n  .catch(error => {\n    createNotification(error, 'warning');\n  });\n\nconst secondPromise = new Promise((resolve, reject) => {\n  Promise.race([clickPromise, contextMenuPromise])\n    .then((value) => resolve('Second promise was resolved'));\n});\n\nsecondPromise\n  .then(result => {\n    createNotification(result, 'success');\n  });\n\nconst thirdPromise = new Promise(resolve => {\n  Promise.all([clickPromise, contextMenuPromise])\n    .then((value) => resolve('Third promise was resolved'));\n});\n\nthirdPromise\n  .then(result => {\n    createNotification(result, 'success');\n  });\n"]}